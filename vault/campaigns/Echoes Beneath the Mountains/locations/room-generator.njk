---
title: Room Generator (Moria)
layout: layout.njk
permalink: /echoes-beneath-the-mountains/locations/room-generator/
publish: true
theme: tor
campaign: echoes
eleventyNavigation:
  key: Room Generator
  parent: Locations
  order: 1
---

<h1 class="sr-only">Moria Room Generator</h1>

<section class="tor-card">
  <div class="tor-card__body">
    <h2 class="tor-title">Generate a Random Room</h2>
    <p class="muted">Rolls four d12 results (with special symbols for 11 = Eye Rune and 12 = G Rune) and looks up text from your Google Sheet.</p>

    <form id="room-form" class="grid" style="grid-template-columns: repeat(auto-fit, minmax(220px,1fr)); gap: 1rem;">
      <div>
        <label class="tor-label">Sheet URL (published CSV)</label>
        <input id="sheetUrl" class="tor-input" type="url" placeholder="https://docs.google.com/spreadsheets/d/e/2PACX-1vSigeq-FkJYBvFAPcVBiBM9-J9q3iAlEaiJP8U-7SJo1V2nCNAmOQA-eQ1IHO1tuY31EG757Le57GzI/pub?output=csv" required>
        <p class="muted" style="margin-top:.25rem;">Make sure your sheet is <em>File → Share → Publish to the web</em> and the URL ends with <code>output=csv</code>.</p>
      </div>

      <div>
        <label class="tor-label">Preset Rolls (optional)</label>
        <div class="grid" style="grid-template-columns: repeat(4,1fr); gap:.5rem;">
          <input id="r1" class="tor-input" type="text" inputmode="numeric" placeholder="1–12/eye/g" aria-label="Roll 1">
          <input id="r2" class="tor-input" type="text" inputmode="numeric" placeholder="1–12/eye/g" aria-label="Roll 2">
          <input id="r3" class="tor-input" type="text" inputmode="numeric" placeholder="1–12/eye/g" aria-label="Roll 3">
          <input id="r4" class="tor-input" type="text" inputmode="numeric" placeholder="1–12/eye/g" aria-label="Roll 4">
        </div>
        <p class="muted" style="margin-top:.25rem;">Leave blank to roll randomly. Use <code>eye</code> for 11 and <code>g</code> for 12.</p>
      </div>

      <div class="flex" style="gap:.5rem; align-items:flex-end;">
        <button class="tor-btn" type="submit">Roll All</button>
        <button id="rerollRoom" class="tor-btn tor-btn--ghost" type="button" title="Reroll everything">Reroll</button>
      </div>
    </form>

    <hr class="tor-hr">

    <div id="results" class="grid" style="grid-template-columns: repeat(auto-fit, minmax(260px,1fr)); gap: 1rem;">
      <div class="card" data-slot="1">
        <div class="card__hdr">Chamber Type <span class="muted" id="roll1"></span></div>
        <div class="card__body" id="text1">—</div>
        <div class="card__ftr"><button class="tor-btn tor-btn--sm" data-reroll="1">Reroll Type</button></div>
      </div>
      <div class="card" data-slot="2">
        <div class="card__hdr">Condition <span class="muted" id="roll2"></span></div>
        <div class="card__body" id="text2">—</div>
        <div class="card__ftr"><button class="tor-btn tor-btn--sm" data-reroll="2">Reroll Condition</button></div>
      </div>
      <div class="card" data-slot="3">
        <div class="card__hdr">Appearance <span class="muted" id="roll3"></span></div>
        <div class="card__body" id="text3">—</div>
        <div class="card__ftr"><button class="tor-btn tor-btn--sm" data-reroll="3">Reroll Appearance</button></div>
      </div>
      <div class="card" data-slot="4">
        <div class="card__hdr">Challenge <span class="muted" id="roll4"></span></div>
        <div class="card__body" id="text4">—</div>
        <div class="card__ftr"><button class="tor-btn tor-btn--sm" data-reroll="4">Reroll Challenge</button></div>
      </div>
    </div>

    <details style="margin-top:1rem;">
      <summary>Debug</summary>
      <pre id="debug" class="tor-pre"></pre>
    </details>
  </div>
</section>

<style>
  .card{background:#fffefb;border:1px solid var(--color-border, #e5dfd6);border-radius:14px;padding:1rem}
  .card__hdr{font-weight:600;margin-bottom:.25rem}
  .card__body{min-height:3.5rem}
  .card__ftr{margin-top:.5rem}
</style>

<script>
(function(){
  const form = document.getElementById("room-form");
  const rerollAllBtn = document.getElementById("rerollRoom");
  const debug = document.getElementById("debug");

  // Helpers
  const toRune = (n) => {
    if (typeof n === "string") {
      const s = n.trim().toLowerCase();
      if (s === "eye" || s === "11") return "eye";
      if (s === "g"   || s === "12") return "g";
      const num = Number(s);
      return (num === 11) ? "eye" : (num === 12 ? "g" : num);
    }
    return (n === 11) ? "eye" : (n === 12 ? "g" : n);
  };

  const rollD12 = () => {
    const n = Math.floor(Math.random() * 12) + 1;
    return toRune(n);
  };

  const csvToRows = (csv) => {
    // Minimal CSV parser for simple 3-column sheet
    const lines = csv.replace(/\r\n/g, "\n").split(/\n+/).filter(Boolean);
    return lines.map(line => {
      // split by comma, but keep quoted text intact
      const out = [];
      let cur = "", inQ = false;
      for (let i=0;i<line.length;i++){
        const c = line[i];
        if (c === '"' ) { inQ = !inQ; continue; }
        if (c === ',' && !inQ) { out.push(cur); cur = ""; continue; }
        cur += c;
      }
      out.push(cur);
      return out.map(s => s.trim());
    });
  };

  function groupSheet(rows){
    // Expect 3 columns: [whichRoll(1-4), result(1-12|eye|g), text]
    // Skip header if present (non-numeric first cell)
    if (rows.length && isNaN(parseInt(rows[0][0],10))) rows = rows.slice(1);
    const groups = {1:{},2:{},3:{},4:{}};
    rows.forEach(r => {
      const slot = Number(r[0]);
      if (![1,2,3,4].includes(slot)) return;
      const key = toRune(r[1]); // 1..10, 'eye', 'g'
      const val = r[2] || "";
      groups[slot][String(key)] = val;
    });
    return groups;
  }

  function displayRoll(slot, val, text){
    const label = (val === "eye") ? "11 (Eye Rune)" : (val === "g" ? "12 (G Rune)" : String(val));
    document.getElementById("roll"+slot).textContent = "· roll " + label;
    document.getElementById("text"+slot).textContent = text || "—";
  }

  function pick(groups, slot, forced){
    const val = forced ?? rollD12();
    const key = String(val);
    const text = groups?.[slot]?.[key] || "";
    displayRoll(slot, val, text);
    return val;
  }

  function renderAll(groups, preset){
    const v1 = pick(groups, 1, preset?.[0]);
    const v2 = pick(groups, 2, preset?.[1]);
    const v3 = pick(groups, 3, preset?.[2]);
    const v4 = pick(groups, 4, preset?.[3]);
    return [v1,v2,v3,v4];
  }

  async function fetchCsv(url){
    const res = await fetch(url, { credentials: "omit", cache: "no-cache" });
    if (!res.ok) throw new Error("Failed to fetch sheet: " + res.status);
    const txt = await res.text();
    return txt;
  }

  function getPresetFromInputs(){
    const ids = ["r1","r2","r3","r4"];
    const vals = ids.map(id => {
      const v = document.getElementById(id).value.trim();
      if (!v) return undefined;
      return toRune(v);
    });
    return vals;
  }

  form.addEventListener("submit", async (e) => {
    e.preventDefault();
    debug.textContent = "";

    const url = document.getElementById("sheetUrl").value.trim();
    if (!url) { alert("Please paste your published CSV URL."); return; }

    try {
      const csv = await fetchCsv(url);
      const rows = csvToRows(csv);
      const groups = groupSheet(rows);
      const preset = getPresetFromInputs();
      renderAll(groups, preset);

      // Attach per-card rerolls
      document.querySelectorAll("[data-reroll]").forEach(btn => {
        btn.onclick = () => {
          const slot = Number(btn.getAttribute("data-reroll"));
          pick(groups, slot, undefined);
        };
      });

      // Global reroll
      rerollAllBtn.onclick = () => renderAll(groups, undefined);

      // Debug info
      debug.textContent = JSON.stringify(groups, null, 2);

    } catch (err){
      console.error(err);
      alert("Could not load the sheet. Is it published to the web as CSV?");
      debug.textContent = String(err && err.stack || err);
    }
  });

  // URL prefill support: ?r1=eye&r2=12&r3=3&r4=g&sheet=...
  const params = new URLSearchParams(location.search);
  if (params.has("sheet")) document.getElementById("sheetUrl").value = params.get("sheet");
  ["r1","r2","r3","r4"].forEach((id, i) => {
    const key = "r" + (i+1);
    if (params.has(key)) document.getElementById(key).value = params.get(key);
  });
  // Auto-submit if sheet provided
  if (params.has("sheet")) form.dispatchEvent(new Event("submit"));
})();
</script>
