---
title: Mothership Wound Table
layout: layout.njk
permalink: /mothership/tools/wound/
publish: true
theme: mothership
campaign: mothership_oct
eleventyNavigation:
  key: Table B (1d10 × 5)
  parent: Tools
  order: 2
---

<section class="ms-card">
  <h2 class="ms-h">Wound Table</h2>
  <p class="ms-p">Roll a d10 (0–9) and choose a type of <strong>Damage</strong></p>
  <p class="ms-p">The types of damage are:</p>
  <ul>
    <li><strong>Blunt Force:</strong> Getting punched, hit with a crowbar or a thrown object, falling, etc.</li>
    <li><strong>Bleeding:<strong/> Getting stabbed or cut.</li>
    <li><strong>Gunshot:</strong/> Getting shot by a firearm.</li>
    <li><strong>Fire & Explosives:</strong/> Grenades, flamethrowers, doused in fuel and lit on fire, etc.</li>
    <li><strong>Gore & Massive:</strong/> Giant or gruesome attacks.
  </ul>
  <form id="form-b" class="stack" novalidate>
    <label>
      d10 roll (0–9)
      <input id="b-die" name="b" type="number" min="0" max="9" required aria-describedby="b-help">
    </label>

    <label>
      Damage
      <select id="b-cond" name="cond" required aria-describedby="b-help"></select>
    </label>
    <div id="b-help" class="help">Enter 0–9 and pick a type of damage, or press Roll.</div>

    <div class="actions">
      <button type="submit">Find Result</button>
      <button type="button" id="b-roll">Roll d10 (0–9)</button>
    </div>
  </form>

  <output id="b-out" role="status" aria-live="polite"></output>

  <details id="b-linkout" hidden>
    <summary>Share this exact result</summary>
    <p><a id="b-share" href="#">Permalink with this roll &amp; condition</a></p>
  </details>
</section>

<style>
  .stack { display: grid; gap: 0.75rem; max-width: 30rem; }
  .actions { display: flex; gap: 0.5rem; flex-wrap: wrap; }
  output { display:block; margin-top: .75rem; font-weight:600; }
  .ms-card { padding: 1rem; border-radius: .75rem; box-shadow: 0 2px 10px rgba(0,0,0,.08); margin-block: 1rem; }
  .ms-h { margin: 0 0 .5rem; font-size: 1.25rem; }
  .ms-p { margin: 0 0 .75rem; }
  .help { font-size: .85rem; opacity: .8; }
  .sr-only { position:absolute; width:1px; height:1px; overflow:hidden; clip:rect(0,0,0,0); white-space:nowrap; }
</style>

<script>
const TABLE_B_TSV = "https://docs.google.com/spreadsheets/d/e/2PACX-1vRmvKc-YUpSCz0phaoVJmSQ1ZcToEneuv9lacLfd82adnxVesVBlAljo1G36WSjVYRqDL2NRxWhskGP/pub?output=tsv"; // ends with output=tsv

// OPTIONAL: If your headers in C–G are blank or funky, set these to force the dropdown:
// const CONDITION_HEADERS_OVERRIDE = ["Derelict","Station","Ship","Planet","Deep Space"];
const CONDITION_HEADERS_OVERRIDE = null;

const $ = sel => document.querySelector(sel);
const $$ = sel => Array.from(document.querySelectorAll(sel));
const rollD10ZeroNine = () => Math.floor(Math.random() * 10); // 0..9

async function fetchTSV(url) {
  const res = await fetch(url, { cache: "no-store" });
  if (!res.ok) throw new Error(`HTTP ${res.status}`);
  const text = await res.text();
  // Trim cells, drop fully-empty rows
  const rows = text.replace(/\r\n?/g, "\n").split("\n").map(r => r.split("\t").map(c => (c ?? "").trim()));
  return rows.filter(r => r.some(c => c !== ""));
}

/**
 * Expected data:
 *   A: roll (0–9)
 *   B: severity
 *   C..G: up to 5 condition columns (names ideally in header row)
 * We auto-detect a header row if row0 colA is NOT a pure 0–9 number.
 */
function parseMatrix(matrix) {
  const hasHeader = !/^\d$/.test((matrix[0][0] || ""));
  const startRow = hasHeader ? 1 : 0;

  // Derive condition headers (C..G)
  let conds = CONDITION_HEADERS_OVERRIDE
    ? [...CONDITION_HEADERS_OVERRIDE]
    : (hasHeader
        ? matrix[0].slice(2, 7).map((h, i) => h || `Condition ${i + 1}`)
        : Array.from({ length: 5 }, (_, i) => `Condition ${i + 1}`));

  // Normalize to exactly 5 names
  conds = conds.slice(0, 5);
  while (conds.length < 5) conds.push(`Condition ${conds.length + 1}`);

  // Build rows
  const rows = [];
  for (let i = startRow; i < matrix.length; i++) {
    const r = matrix[i];
    const roll = Number(r[0]);
    if (!Number.isInteger(roll) || roll < 0 || roll > 9) continue;
    const severity = r[1] ?? "";
    const entry = { roll, severity };
    conds.forEach((name, idx) => {
      entry[name] = r[idx + 2] ?? "";
    });
    rows.push(entry);
  }

  // Filter out conditions that are empty across all rows
  const nonEmptyConds = conds.filter(name => rows.some(row => (row[name] || "") !== ""));
  return { rows, conds: nonEmptyConds.length ? nonEmptyConds : conds, hasHeader, startRow };
}

function lookup(parsed, n, condName) {
  const row = parsed.rows.find(r => r.roll === n);
  if (!row) return null;
  // Match condition by case-insensitive name, fall back to first condition
  const key = parsed.conds.find(c => c.toLowerCase() === String(condName || "").toLowerCase()) || parsed.conds[0];
  return { text: row[key] ?? "", severity: row.severity ?? "", condUsed: key };
}

// Simple debug widget
function setDebug(info) {
  const box = document.getElementById("debug-box");
  if (!box) return;
  box.innerHTML = `
    <details>
      <summary>Debug</summary>
      <pre>${JSON.stringify(info, null, 2)}</pre>
    </details>
  `;
}

(function init() {
  const bForm = $("#form-b"), bOut = $("#b-out"), bRollBtn = $("#b-roll"),
        bLink = $("#b-linkout"), bShare = $("#b-share"), bCond = $("#b-cond");

  let parsed = { rows: [], conds: [] };

  (async () => {
    try {
      bOut.textContent = "Loading Table B…";
      const matrix = await fetchTSV(TABLE_B_TSV);
      parsed = parseMatrix(matrix);

      // Populate condition dropdown
      if (parsed.conds.length) {
        bCond.innerHTML = parsed.conds.map(c => `<option value="${c}">${c}</option>`).join("");
      } else {
        bCond.innerHTML = `<option value="">(No conditions found)</option>`;
      }
      setDebug({ detectedConds: parsed.conds, rows: parsed.rows.length, headerRow: parsed.hasHeader, startRow: parsed.startRow });
      bOut.textContent = "";
    } catch (e) {
      console.error("Table B load failed:", e);
      bOut.textContent = "Could not load Table B. Open the TSV URL directly to verify publishing.";
    }

    function renderShare(n, cond) {
      const url = new URL(location.href);
      url.searchParams.set("d10", String(n)); // 0–9
      url.searchParams.set("cond", String(cond));
      bShare.href = url.toString();
      bLink.hidden = false;
    }

    function renderResult(resultObj) {
      if (!resultObj) {
        bOut.textContent = "No match found.";
        bLink.hidden = true;
        return;
      }
      const { text, severity, condUsed } = resultObj;
      bOut.textContent = `Severity: ${String(severity).trim()} — ${String(text).trim()}`;
      setDebug({ lastRoll: $("#b-die").value, condUsed, severity, text });
    }

    bForm.addEventListener("submit", e => {
      e.preventDefault();
      const n = Number($("#b-die").value);
      const cond = $("#b-cond").value;
      if (!Number.isInteger(n) || n < 0 || n > 9 || !cond) {
        bOut.textContent = "Enter a valid d10 (0–9) and choose a condition.";
        bLink.hidden = true;
        return;
      }
      const result = lookup(parsed, n, cond);
      renderResult(result);
      if (result) renderShare(n, cond);
    });

    bRollBtn.addEventListener("click", () => {
      const n = rollD10ZeroNine();
      $("#b-die").value = n;
      const cond = $("#b-cond").value || (parsed.conds[0] || "");
      if (cond && !$("#b-cond").value) $("#b-cond").value = cond;
      const result = cond ? lookup(parsed, n, cond) : null;
      renderResult(result);
      if (result) renderShare(n, cond);
    });

    // URL prefill: ?d10=0..9&cond=Station
    const params = new URLSearchParams(location.search);
    if (params.has("d10")) $("#b-die").value = params.get("d10");
    if (params.has("cond")) {
      const want = params.get("cond");
      const opt = $$("#b-cond option").find(o => o.textContent.toLowerCase() === String(want).toLowerCase());
      if (opt) $("#b-cond").value = opt.value;
    }
    if (params.has("d10") || params.has("cond")) bForm.dispatchEvent(new Event("submit"));
  })();
})();
</script>

<!-- Add this tiny debug box somewhere inside your page (e.g., under the output) -->
<div id="debug-box" style="margin-top:.5rem; font-size:.85rem;"></div>
