---
title: Mothership Wound Table
layout: layout.njk
permalink: /mothership/tools/wound/
publish: true
theme: mothership
campaign: mothership_oct
eleventyNavigation:
  key: Table B (1d10 × 5)
  parent: Tools
  order: 2
---

<section class="ms-card">
  <h2 class="ms-h">Wound Table — 0–9 with Severity + Conditions</h2>
  <p class="ms-p">Roll a d10 (0–9), then choose a condition (columns C–G). <strong>Severity</strong> (column B) is always shown.</p>

  <form id="form-b" class="stack" novalidate>
    <label>
      d10 roll (0–9)
      <input id="b-die" name="b" type="number" min="0" max="9" required aria-describedby="b-help">
    </label>

    <label>
      Condition
      <select id="b-cond" name="cond" required aria-describedby="b-help"></select>
    </label>
    <div id="b-help" class="help">Enter 0–9 and pick a condition, or press Roll.</div>

    <div class="actions">
      <button type="submit">Find Result</button>
      <button type="button" id="b-roll">Roll d10 (0–9)</button>
    </div>
  </form>

  <output id="b-out" role="status" aria-live="polite"></output>

  <details id="b-linkout" hidden>
    <summary>Share this exact result</summary>
    <p><a id="b-share" href="#">Permalink with this roll &amp; condition</a></p>
  </details>
</section>

<style>
  .stack { display: grid; gap: 0.75rem; max-width: 30rem; }
  .actions { display: flex; gap: 0.5rem; flex-wrap: wrap; }
  output { display:block; margin-top: .75rem; font-weight:600; }
  .ms-card { padding: 1rem; border-radius: .75rem; box-shadow: 0 2px 10px rgba(0,0,0,.08); margin-block: 1rem; }
  .ms-h { margin: 0 0 .5rem; font-size: 1.25rem; }
  .ms-p { margin: 0 0 .75rem; }
  .help { font-size: .85rem; opacity: .8; }
  .sr-only { position:absolute; width:1px; height:1px; overflow:hidden; clip:rect(0,0,0,0); white-space:nowrap; }
</style>

<script>
const TABLE_B_TSV = "PASTE_THE_1D10x5_TSV_URL_HERE"; // ends with output=tsv

const $ = sel => document.querySelector(sel);
const $$ = sel => Array.from(document.querySelectorAll(sel));
// Roll 0–9 uniformly
const rollD10ZeroNine = () => Math.floor(Math.random() * 10); // 0..9

async function fetchTSV(url) {
  const res = await fetch(url, { cache: "no-store" });
  if (!res.ok) throw new Error(`HTTP ${res.status}`);
  const text = await res.text();
  return text.replace(/\r\n?/g, "\n").split("\n").filter(Boolean).map(r => r.split("\t"));
}

/**
 * Expect header like:
 *   A: roll   B: severity   C..G: condition names
 * Followed by 10 rows with roll 0..9
 */
function bParse(matrix) {
  if (!matrix.length) return { headers: [], rows: [], conds: [] };
  const headers = matrix[0].map(h => String(h).trim());
  const [hRoll, hSeverity, ...conds] = headers;
  const rows = matrix.slice(1).map(r => {
    const roll = Number(r[0]);
    const severity = r[1] ?? "";
    const obj = { roll, severity };
    conds.forEach((name, i) => { obj[name] = r[i + 2] ?? ""; });
    return obj;
  });
  return { headers: [hRoll, hSeverity, ...conds], rows, conds };
}

function bLookup(parsed, n, condName) {
  const row = parsed.rows.find(r => r.roll === n);
  if (!row) return null;
  const key = parsed.conds.find(h => h.toLowerCase() === String(condName).toLowerCase());
  if (!key) return null;
  return { text: row[key] ?? null, severity: row.severity ?? "" };
}

(function init() {
  const bForm = $("#form-b"), bOut = $("#b-out"), bRollBtn = $("#b-roll"),
        bLink = $("#b-linkout"), bShare = $("#b-share"), bCond = $("#b-cond");

  let bParsed = { headers: [], rows: [], conds: [] };

  (async () => {
    try {
      bOut.textContent = "Loading Table B…";
      const bMatrix = await fetchTSV(TABLE_B_TSV);
      bParsed = bParse(bMatrix);

      // Populate dropdown from condition headers (C..G)
      if (bParsed.conds.length) {
        bCond.innerHTML = bParsed.conds.map(c => `<option value="${c}">${c}</option>`).join("");
      } else {
        bCond.innerHTML = `<option value="">(No condition headers found)</option>`;
      }
      bOut.textContent = "";
    } catch (e) {
      console.error("Table B load failed:", e);
      bOut.textContent = "Could not load Table B. Open the TSV URL directly to verify publishing.";
    }

    function renderShare(n, cond) {
      const url = new URL(location.href);
      url.searchParams.set("d10", String(n)); // 0–9
      url.searchParams.set("cond", String(cond));
      bShare.href = url.toString();
      bLink.hidden = false;
    }

    function renderResult(resultObj) {
      if (!resultObj || resultObj.text == null) {
        bOut.textContent = "No match found.";
        bLink.hidden = true;
        return;
      }
      const { text, severity } = resultObj;
      // Always show severity
      bOut.textContent = `Severity: ${String(severity).trim()} — ${String(text).trim()}`;
    }

    bForm.addEventListener("submit", e => {
      e.preventDefault();
      const n = Number($("#b-die").value);
      const cond = $("#b-cond").value;
      if (!Number.isInteger(n) || n < 0 || n > 9 || !cond) {
        bOut.textContent = "Enter a valid d10 (0–9) and choose a condition.";
        bLink.hidden = true;
        return;
      }
      const result = bLookup(bParsed, n, cond);
      renderResult(result);
      if (result) renderShare(n, cond);
    });

    bRollBtn.addEventListener("click", () => {
      const n = rollD10ZeroNine();
      $("#b-die").value = n;
      const cond = $("#b-cond").value || (bParsed.conds[0] || "");
      if (cond && !$("#b-cond").value) $("#b-cond").value = cond;
      const result = cond ? bLookup(bParsed, n, cond) : null;
      renderResult(result);
      if (result) renderShare(n, cond);
    });

    // URL prefill: ?d10=0..9&cond=Station
    const params = new URLSearchParams(location.search);
    if (params.has("d10")) $("#b-die").value = params.get("d10");
    if (params.has("cond")) {
      const want = params.get("cond");
      const opt = $$("#b-cond option").find(o => o.textContent.toLowerCase() === String(want).toLowerCase());
      if (opt) $("#b-cond").value = opt.value;
    }
    if (params.has("d10") || params.has("cond")) bForm.dispatchEvent(new Event("submit"));
  })();
})();
</script>
